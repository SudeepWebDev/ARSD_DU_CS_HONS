Bisection
Regula Falsi
secant
Newton Raphson

Gauss Jacobi
Gauss Seidel

Langrange Interpolation
Newton Divided Difference

Trapezoidal
Simpson 1/3

Euler
RK 4th Order




bisection(f,a,b,tol):= block(
    [c],
    if f(a).f(b) > 0 then error("Must have opposite sign!");
    while abs(b-a) > tol(
        c: (b+a)/2,
        if f(c) = 0 then  return c,
        if f(a).f(c) > 0 then b:c else a:c
    ),
    return(c)
);

wxplot2d(f(x), [],[]);

regula_falsi(f,a,b,tol):= block(
    [c],
    if f(a).f(b) > 0 then error("Must have opposite sign!");
    while abs(b-a) > tol(
        c: a-f(a).(b-a)/(f(b)-f(a)),
        if f(c) = 0 then  return c,
        if f(a).f(c) > 0 then b:c else a:c
    ),
    return(c)
);

secant(f,x0,x1,tol):=block(
    [x2],
    while abs(x1-x0) > tol(
        x2: x1-f(x1).(x1-x0)/(f(x1)-f(x0)),
        if f(x2) = 0 then  return x2,
        x0:x1,
        x1:x2
    ),
    return(x1)
);

newton_raphson(f,x0,tol):=block(
    [x1, f_prime:=diff(f(x),x)],
    x1: x0-(f(x0)/ev(f_prime,x=x0)),
    while abs(f(x1)) > tol do(
        x0: x1,
        x1: x0-(f(x0)/ev(f_prime,x=x0))
    ),
    return(x1)
);

trapezoidal(f,a,b,n):=block(
    [h:(b-a)/n,sum:f(a)+f(b),i,I,err],
    for i:1 thru n-1 do(
        sum: sum + 2.f(a+i.h)
    ),
    I: integrate(f(x),x,a,b),
    err: abs(I-h.sum/2),
);

simpson1/3(f,a,b,n):=block(
    [h:(b-a)/n,sum:f(a)+f(b),i,I,err],
    for i:1 step 2 thru n-1(
        sum: sum + 4.f(a+i.h)
    ),
    for i:2 step 2 thru n-2(
        sum: sum + 2.f(a+i.h)
    ),
    I: integrate(f(x),x,a,b),
    err: abs(I-h.sum/3),
);

euler(f,x0,y0,h,x_end):=block(
    [x:x0,y:y0,i,n:(x_end-x0)/h],
    for i:1 thru n do(
        y:y+h.f(x,y),
        x:x+h
    ),
);

rk4(f,x0,y0,h,x_end):=block(
    [x:x0,y:y0,i,n:(x_end-x0)/h,k1,k2,k3,k4],
    for i:1 thru n do(
        k1:f(x,y),
        k2:f(x+h/2,y+k1.h/2),
        k3:f(x+h/2,y+k2.h/2),
        k4:f(x+h,y+k3.h),
        y:y+(k1+2.(k2+k3)+k4)/6,
        x:x+h,
    ),
);

jacobi(A,b,x0,tol,max_iter):=block(
    [n:length(b),x:x0,i,j,sum,iter:0,err,x_new],
    while iter<max_iter do(
        x_new:makelist(0,i,1,n),
        for i:1 thru n do(
            sum:0,
            for j:1 thru n do(
                if i#j then sum:sum+A[i][j].x[j]
            ),
            x_new[i]:(b[i]-sum)/A[i][i],
        ),
        err:max(map(lambda([v,v_new],abs(v-v_new)),x,x_new)),
        if err<tol then return(x_new),
        x:x_new,
        iter:iter+1
    ),
);

seidel(A,b,x0,tol,max_iter):=block(
    [x:x0,sum,n:length(b),err,iter:0,i,j],
    while iter<max_iter do(
        for i:1 thru n do(
            sum:0,
            for j:1 thru n do(
                if i#j then sum:sum+A[i][j].x[j]
            ),
            x[i]:(b[i]-sum)/A[i][i],
        ),
        err:max(map(lambda([v,v_new],abs(v-v_new)),x0,x)),
        if err<tol then return(x),
        x0:x,
        iter:iter+1
    ),
);

langrange(x_vals,y_vals,eval_point):=block(
    [n:length(x_vals),L,P:0,x,i,j,result],
    for i:1 thru n do(
        L:1,
        for j:1 thru n do(
            if i#j then L:expand(L.(x-x_vals[j])/(x_vals[i]-x_vals[j]))
        ),
        P:expand(P+y_vals[i].L)
    ),
);

divided_differnce(x_vals,y_vals):=block(
    [n:length(x_vals),dd:makelist(y_vals[i],i,1,n),],
    for i:2 thru n do(
        for j:n step-1 thru i do(
            dd[j]:(dd[j]-dd[j-1])/(x_vals[j]-x_vals[j-i+1])
        ),
    ),
    return(dd)
);

newton_dd(x_vals,dd,x):=block(
    [n:length(x_vals),poly:dd[1],term:1],
    for i:2 thru n do(
        term:term.(x-x_vals[i-1]),
        poly:poly+dd[i].term
    ),
    return(expand(poly))
);
