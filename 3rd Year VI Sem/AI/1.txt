% ==========================================
% 1. FAMILY TREE
% ==========================================
% Facts
parent(john, mary).
parent(mary, susan).
parent(john, peter).
parent(peter, david).

% Rules
grandparent(X, Y) :- parent(X, Z), parent(Z, Y).
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.
ancestor(X, Y) :- parent(X, Y).
ancestor(X, Y) :- parent(X, Z), ancestor(Z, Y).

% Demonstration queries:
% ?- parent(john, X).
% ?- grandparent(john, susan).
% ?- sibling(mary, peter).
% ?- ancestor(john, david).

% ==========================================
% 2. CONCATENATE LISTS
% ==========================================
conc([], L, L).
conc([H|T], L2, [H|L3]) :- conc(T, L2, L3).

% Demonstration queries:
% ?- conc([1, 2], [3, 4], L).
% ?- conc(L1, L2, [1, 2, 3, 4]).
% ?- conc([1, 2], L, [1, 2, 3, 4]).

% ==========================================
% 3. REVERSE LIST
% ==========================================
reverse(L, R) :- reverse_acc(L, [], R).
reverse_acc([], Acc, Acc).
reverse_acc([H|T], Acc, R) :- reverse_acc(T, [H|Acc], R).

% Demonstration queries:
% ?- reverse([1, 2, 3, 4], R).
% ?- reverse([], R).
% ?- reverse([a, b, c], [c, b, a]).

% ==========================================
% 4. SUM TWO NUMBERS
% ==========================================
sum(X, Y, Z) :- Z is X + Y.

% Demonstration queries:
% ?- sum(3, 4, Z).
% ?- sum(10, 20, 30).
% ?- sum(5, Y, 12).

% ==========================================
% 5. MAXIMUM TWO NUMBERS
% ==========================================
max(X, Y, X) :- X >= Y.
max(X, Y, Y) :- Y > X.

% Demonstration queries:
% ?- max(3, 4, M).
% ?- max(10, 5, M).
% ?- max(7, 7, M).

% ==========================================
% 6. FACTORIAL
% ==========================================
factorial(0, 1).
factorial(N, F) :-
    N > 0,
    N1 is N - 1,
    factorial(N1, F1),
    F is N * F1.

% Demonstration queries:
% ?- factorial(5, F).
% ?- factorial(0, F).
% ?- factorial(10, F).

% ==========================================
% 7. FIBONACCI SERIES
% ==========================================
generate_fib(0, 0).
generate_fib(1, 1).
generate_fib(N, T) :-
    N > 1,
    N1 is N - 1,
    N2 is N - 2,
    generate_fib(N1, T1),
    generate_fib(N2, T2),
    T is T1 + T2.

% Demonstration queries:
% ?- generate_fib(5, F).
% ?- generate_fib(10, F).
% ?- generate_fib(0, F).

% ==========================================
% 8. POWER
% ==========================================
power(_, 0, 1).
power(Num, Pow, Ans) :-
    Pow > 0,
    Pow1 is Pow - 1,
    power(Num, Pow1, Ans1),
    Ans is Num * Ans1.

% Demonstration queries:
% ?- power(2, 3, A).
% ?- power(5, 0, A).
% ?- power(10, 2, A).

% ==========================================
% 9. MULTIPLICATION
% ==========================================
multi(N1, N2, R) :- R is N1 * N2.

% Demonstration queries:
% ?- multi(3, 4, R).
% ?- multi(0, 5, R).
% ?- multi(10, 10, R).

% ==========================================
% 10. MEMBERSHIP
% ==========================================
memb(X, [X|_]).
memb(X, [_|T]) :- memb(X, T).

% Demonstration queries:
% ?- memb(3, [1, 2, 3, 4]).
% ?- memb(5, [1, 2, 3, 4]).
% ?- memb(X, [a, b, c]).

% ==========================================
% 11. SUM OF LIST
% ==========================================
sumlist([], 0).
sumlist([H|T], S) :-
    sumlist(T, S1),
    S is H + S1.

% Demonstration queries:
% ?- sumlist([1, 2, 3, 4], S).
% ?- sumlist([], S).
% ?- sumlist([10, 20, 30], S).

% ==========================================
% 12. EVEN ODD LENGTH
% ==========================================
evenlength([]).
evenlength([_|T]) :- oddlength(T).

oddlength([_]).
oddlength([_|T]) :- evenlength(T).

% Demonstration queries:
% ?- evenlength([1, 2, 3, 4]).
% ?- evenlength([1, 2, 3]).
% ?- oddlength([a, b, c]).
% ?- oddlength([]).

% ==========================================
% 13. MAXIMUM IN LIST
% ==========================================
maxlist([X], X).
maxlist([H|T], M) :-
    maxlist(T, M1),
    M is max(H, M1).

% Demonstration queries:
% ?- maxlist([1, 5, 3, 9, 2], M).
% ?- maxlist([7], M).
% ?- maxlist([10, 20, 30, 5], M).

% ==========================================
% 14. INSERT ELEMENT
% ==========================================
insert(I, 1, L, [I|L]).
insert(I, N, [H|T], [H|R]) :-
    N > 1,
    N1 is N - 1,
    insert(I, N1, T, R).

% Demonstration queries:
% ?- insert(a, 3, [1, 2, 3, 4], R).
% ?- insert(x, 1, [a, b, c], R).
% ?- insert(z, 4, [p, q, r], R).

% ==========================================
% 15. DELETE ELEMENT
% ==========================================
delete(1, [_|T], T).
delete(N, [H|T], [H|R]) :-
    N > 1,
    N1 is N - 1,
    delete(N1, T, R).

% Demonstration queries:
% ?- delete(3, [1, 2, 3, 4], R).
% ?- delete(1, [a, b, c], R).
% ?- delete(5, [p, q, r, s, t], R).
